##Not satisfied with the model optimization
##Try it for random forest
#Algorithm Optimization by Grid Search
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.cross_validation import StratifiedKFold # Add important libs
randomforest = RandomForestClassifier()
parameter_gridsearch = {
                 'max_depth' : [3, 4],  #depth of each decision tree
                 'n_estimators': [50, 20],  #count of decision tree
                 'max_features': ['sqrt', 'auto', 'log2'],      
                 'min_samples_split': [2],      
                 'min_samples_leaf': [1, 3, 4],
                 'bootstrap': [True, False],
                 }


#Random Forrest Classifier
crossvalidation = StratifiedKFold(y_train2.values.ravel() , n_folds=5)


gridsearch = GridSearchCV(randomforest,             #grid search for algorithm optimization
                               scoring='accuracy',
                               param_grid=parameter_gridsearch,
                               cv=crossvalidation)

gridsearch.fit(x_train2, y_train2.values.ravel())    #y_train[0::,0] is as target
rf_model = gridsearch
parameters = gridsearch.best_params_


#Score Computation
print('Best Score: {}'.format(gridsearch.best_score_))


#Test set accuracy score
y_pred_rf = rf_model.predict(x_test2)
print("Test set accuracy score: {:.5f}".format(accuracy_score(y_test2, y_pred_rf,)))

print(classification_report(y_test2, y_pred_rf))

roc_auc_rf = roc_auc_score(y_test2, y_pred_rf)
print("Area under the ROC curve : %f" % roc_auc_rf)


